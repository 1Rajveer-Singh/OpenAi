import asyncio
from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta
import json
from loguru import logger
import pandas as pd
import numpy as np
from sqlalchemy.orm import Session
from sqlalchemy import func
from app.models.database import get_db
from app.models.schemas import Transaction, User, InventoryItem

class FinanceAgent:
    """
    AI Agent specialized in financial analysis, profitability insights,
    and business health monitoring for Indian MSMEs.
    """
    
    def __init__(self, openai_client):
        self.openai_client = openai_client
        self.name = "Financial Analysis Assistant"
        self.expertise = [
            "Profitability analysis",
            "Cash flow monitoring",
            "Expense categorization",
            "Revenue forecasting", 
            "Tax compliance insights",
            "Credit score evaluation"
        ]
        
    async def initialize(self):
        """Initialize the finance agent"""
        logger.info("ЁЯТ░ Initializing Finance Agent")
        # Load financial templates, tax rates, etc.
        self.expense_categories = self._load_expense_categories()
        self.tax_rates = self._load_tax_rates()
        self.financial_ratios = self._load_financial_ratios()
        
    async def process_query(
        self, 
        user_id: int, 
        query: str, 
        intent: Dict[str, Any], 
        language: str
    ) -> Dict[str, Any]:
        """Process finance-related queries"""
        try:
            entities = intent.get("entities", [])
            
            # Determine specific financial action
            if any(word in query.lower() for word in ["sales", "рдмрд┐рдХреНрд░реА", "revenue", "рдЖрдп"]):
                return await self._handle_sales_inquiry(user_id, query, language)
            elif any(word in query.lower() for word in ["profit", "рд▓рд╛рдн", "margin", "рдорд╛рд░реНрдЬрд┐рди"]):
                return await self._handle_profit_analysis(user_id, query, language)
            elif any(word in query.lower() for word in ["expense", "рдЦрд░реНрдЪ", "cost", "рд▓рд╛рдЧрдд"]):
                return await self._handle_expense_analysis(user_id, query, language)
            elif any(word in query.lower() for word in ["cash", "рдирдХрджреА", "flow", "рдлреНрд▓реЛ"]):
                return await self._handle_cashflow_inquiry(user_id, query, language)
            elif any(word in query.lower() for word in ["tax", "рдЯреИрдХреНрд╕", "gst", "рдЬреАрдПрд╕рдЯреА"]):
                return await self._handle_tax_inquiry(user_id, query, language)
            else:
                return await self._handle_general_finance_query(user_id, query, language)
                
        except Exception as e:
            logger.error(f"Finance agent query processing failed: {e}")
            return {
                "text": "рд╡рд┐рддреНрддреАрдп рдЬрд╛рдирдХрд╛рд░реА рд▓реЗрдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реЛ рд░рд╣реА рд╣реИ" if language == "hi" else "Having trouble with financial information",
                "agent": "finance",
                "success": False
            }
    
    async def get_insights(self, user_id: int) -> Dict[str, Any]:
        """Get comprehensive financial insights"""
        try:
            db = next(get_db())
            
            # Get financial data for the last 30 days
            thirty_days_ago = datetime.now() - timedelta(days=30)
            
            # Get transactions
            transactions = db.query(Transaction).filter(
                Transaction.user_id == user_id,
                Transaction.transaction_date >= thirty_days_ago
            ).all()
            
            insights = {
                "revenue": {
                    "total_sales": 0,
                    "total_transactions": 0,
                    "avg_transaction_value": 0,
                    "daily_average": 0
                },
                "profitability": {
                    "total_profit": 0,
                    "profit_margin": 0,
                    "profitable_transactions": 0
                },
                "expenses": {
                    "total_expenses": 0,
                    "expense_categories": {},
                    "largest_expense": 0
                },
                "cash_flow": {
                    "net_cash_flow": 0,
                    "cash_in": 0,
                    "cash_out": 0
                },
                "trends": {
                    "revenue_trend": "stable",
                    "growth_rate": 0
                },
                "recommendations": []
            }
            
            if transactions:
                # Calculate revenue metrics
                sales_transactions = [t for t in transactions if t.transaction_type == "sale"]
                expense_transactions = [t for t in transactions if t.transaction_type == "expense"]
                
                if sales_transactions:
                    insights["revenue"]["total_sales"] = sum(t.amount for t in sales_transactions)
                    insights["revenue"]["total_transactions"] = len(sales_transactions)
                    insights["revenue"]["avg_transaction_value"] = (
                        insights["revenue"]["total_sales"] / len(sales_transactions)
                    )
                    insights["revenue"]["daily_average"] = insights["revenue"]["total_sales"] / 30
                
                # Calculate profitability
                profitable_sales = [t for t in sales_transactions if t.profit_margin and t.profit_margin > 0]
                if profitable_sales:
                    insights["profitability"]["total_profit"] = sum(
                        t.amount * (t.profit_margin / 100) for t in profitable_sales
                    )
                    insights["profitability"]["profitable_transactions"] = len(profitable_sales)
                    if insights["revenue"]["total_sales"] > 0:
                        insights["profitability"]["profit_margin"] = (
                            (insights["profitability"]["total_profit"] / insights["revenue"]["total_sales"]) * 100
                        )
                
                # Calculate expenses
                if expense_transactions:
                    insights["expenses"]["total_expenses"] = sum(t.amount for t in expense_transactions)
                    
                    # Categorize expenses (simplified)
                    expense_categories = {}
                    for transaction in expense_transactions:
                        category = self._categorize_expense(transaction.description or "Other")
                        expense_categories[category] = expense_categories.get(category, 0) + transaction.amount
                    
                    insights["expenses"]["expense_categories"] = expense_categories
                    insights["expenses"]["largest_expense"] = max(expense_categories.values()) if expense_categories else 0
                
                # Calculate cash flow
                insights["cash_flow"]["cash_in"] = insights["revenue"]["total_sales"]
                insights["cash_flow"]["cash_out"] = insights["expenses"]["total_expenses"]
                insights["cash_flow"]["net_cash_flow"] = (
                    insights["cash_flow"]["cash_in"] - insights["cash_flow"]["cash_out"]
                )
                
                # Analyze trends (simplified)
                insights["trends"] = await self._analyze_trends(user_id, db)
            
            # Generate recommendations
            insights["recommendations"] = await self._generate_financial_recommendations(insights)
            
            return insights
            
        except Exception as e:
            logger.error(f"Failed to get financial insights: {e}")
            return {"error": "Failed to generate financial insights"}
    
    async def _handle_sales_inquiry(self, user_id: int, query: str, language: str) -> Dict[str, Any]:
        """Handle sales and revenue inquiries"""
        try:
            db = next(get_db())
            
            # Get sales data for different time periods
            today = datetime.now().date()
            yesterday = today - timedelta(days=1)
            week_ago = today - timedelta(days=7)
            month_ago = today - timedelta(days=30)
            
            # Today's sales
            today_sales = db.query(func.sum(Transaction.amount)).filter(
                Transaction.user_id == user_id,
                Transaction.transaction_type == "sale",
                func.date(Transaction.transaction_date) == today
            ).scalar() or 0
            
            # Yesterday's sales
            yesterday_sales = db.query(func.sum(Transaction.amount)).filter(
                Transaction.user_id == user_id,
                Transaction.transaction_type == "sale", 
                func.date(Transaction.transaction_date) == yesterday
            ).scalar() or 0
            
            # This week's sales
            week_sales = db.query(func.sum(Transaction.amount)).filter(
                Transaction.user_id == user_id,
                Transaction.transaction_type == "sale",
                Transaction.transaction_date >= week_ago
            ).scalar() or 0
            
            # This month's sales
            month_sales = db.query(func.sum(Transaction.amount)).filter(
                Transaction.user_id == user_id,
                Transaction.transaction_type == "sale",
                Transaction.transaction_date >= month_ago
            ).scalar() or 0
            
            if language == "hi":
                sales_text = f"""
                ЁЯУИ рдЖрдкрдХреА рдмрд┐рдХреНрд░реА рдХреА рд░рд┐рдкреЛрд░реНрдЯ:
                
                рдЖрдЬ рдХреА рдмрд┐рдХреНрд░реА: тВ╣{today_sales:.2f}
                рдХрд▓ рдХреА рдмрд┐рдХреНрд░реА: тВ╣{yesterday_sales:.2f}
                рдЗрд╕ рд╣рдлреНрддреЗ: тВ╣{week_sales:.2f}
                рдЗрд╕ рдорд╣реАрдиреЗ: тВ╣{month_sales:.2f}
                
                """
                
                # Add trend analysis
                if today_sales > yesterday_sales:
                    sales_text += "ЁЯУК рдЯреНрд░реЗрдВрдб: рдЖрдЬ рдХреА рдмрд┐рдХреНрд░реА рдХрд▓ рд╕реЗ рдмреЗрд╣рддрд░ рд╣реИ! ЁЯСН\n"
                elif today_sales < yesterday_sales:
                    sales_text += "ЁЯУК рдЯреНрд░реЗрдВрдб: рдЖрдЬ рдХреА рдмрд┐рдХреНрд░реА рдХрд▓ рд╕реЗ рдХрдо рд╣реИред рд╕реБрдзрд╛рд░ рдХреА рдЬрд░реВрд░рддред\n"
                else:
                    sales_text += "ЁЯУК рдЯреНрд░реЗрдВрдб: рдЖрдЬ рдХреА рдмрд┐рдХреНрд░реА рдХрд▓ рдХреЗ рдмрд░рд╛рдмрд░ рд╣реИред\n"
                    
                sales_text += f"\nрджреИрдирд┐рдХ рдФрд╕рдд: тВ╣{month_sales/30:.2f}"
            else:
                sales_text = f"""
                ЁЯУИ Your Sales Report:
                
                Today's Sales: тВ╣{today_sales:.2f}
                Yesterday's Sales: тВ╣{yesterday_sales:.2f}
                This Week: тВ╣{week_sales:.2f}
                This Month: тВ╣{month_sales:.2f}
                
                """
                
                # Add trend analysis
                if today_sales > yesterday_sales:
                    sales_text += "ЁЯУК Trend: Today's sales are better than yesterday! ЁЯСН\n"
                elif today_sales < yesterday_sales:
                    sales_text += "ЁЯУК Trend: Today's sales are lower than yesterday. Needs improvement.\n"
                else:
                    sales_text += "ЁЯУК Trend: Today's sales equal to yesterday.\n"
                    
                sales_text += f"\nDaily Average: тВ╣{month_sales/30:.2f}"
            
            return {
                "text": sales_text,
                "agent": "finance",
                "success": True,
                "data": {
                    "today_sales": today_sales,
                    "yesterday_sales": yesterday_sales,
                    "week_sales": week_sales,
                    "month_sales": month_sales
                }
            }
            
        except Exception as e:
            logger.error(f"Sales inquiry failed: {e}")
            return {
                "text": "рдмрд┐рдХреНрд░реА рдХреА рдЬрд╛рдирдХрд╛рд░реА рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИ" if language == "hi" else "Sales information not available",
                "agent": "finance",
                "success": False
            }
    
    async def _handle_profit_analysis(self, user_id: int, query: str, language: str) -> Dict[str, Any]:
        """Handle profit and margin analysis"""
        try:
            db = next(get_db())
            
            # Get transactions with profit margins
            thirty_days_ago = datetime.now() - timedelta(days=30)
            
            profitable_transactions = db.query(Transaction).filter(
                Transaction.user_id == user_id,
                Transaction.transaction_type == "sale",
                Transaction.profit_margin.isnot(None),
                Transaction.transaction_date >= thirty_days_ago
            ).all()
            
            if not profitable_transactions:
                return {
                    "text": "рдЕрднреА рддрдХ рд▓рд╛рдн рдХреА рдЬрд╛рдирдХрд╛рд░реА рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред рдЕрдкрдиреА рд▓рд╛рдЧрдд рдФрд░ рдмрд┐рдХреНрд░реА рдореВрд▓реНрдп рдЬреЛрдбрд╝реЗрдВред" if language == "hi" 
                           else "Profit information not available yet. Add your cost and selling prices.",
                    "agent": "finance",
                    "success": True
                }
            
            # Calculate profit metrics
            total_revenue = sum(t.amount for t in profitable_transactions)
            total_profit = sum(t.amount * (t.profit_margin / 100) for t in profitable_transactions)
            avg_profit_margin = (total_profit / total_revenue) * 100 if total_revenue > 0 else 0
            
            # Find best and worst performing items
            profit_by_item = {}
            for transaction in profitable_transactions:
                if transaction.items_sold:
                    items = transaction.items_sold if isinstance(transaction.items_sold, list) else []
                    for item in items:
                        item_name = item.get("name", "Unknown")
                        item_profit = transaction.amount * (transaction.profit_margin / 100)
                        profit_by_item[item_name] = profit_by_item.get(item_name, 0) + item_profit
            
            if language == "hi":
                profit_text = f"""
                ЁЯТ░ рд▓рд╛рдн рд╡рд┐рд╢реНрд▓реЗрд╖рдг (рдкрд┐рдЫрд▓реЗ 30 рджрд┐рди):
                
                рдХреБрд▓ рдмрд┐рдХреНрд░реА: тВ╣{total_revenue:.2f}
                рдХреБрд▓ рд▓рд╛рдн: тВ╣{total_profit:.2f}
                рдФрд╕рдд рд▓рд╛рдн рдорд╛рд░реНрдЬрд┐рди: {avg_profit_margin:.1f}%
                
                """
                
                if profit_by_item:
                    best_item = max(profit_by_item.items(), key=lambda x: x[1])
                    profit_text += f"рд╕рдмрд╕реЗ рд▓рд╛рднрджрд╛рдпрдХ: {best_item[0]} (тВ╣{best_item[1]:.2f})\n"
                
                # Add recommendations
                if avg_profit_margin < 20:
                    profit_text += "\nтЪая╕П рд╕реБрдЭрд╛рд╡: рд▓рд╛рдн рдорд╛рд░реНрдЬрд┐рди рдХрдо рд╣реИред рдХреАрдорддреЗрдВ рдмрдврд╝рд╛рдиреЗ рдпрд╛ рд▓рд╛рдЧрдд рдХрдо рдХрд░рдиреЗ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВред"
                elif avg_profit_margin > 30:
                    profit_text += "\nтЬЕ рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛! рд▓рд╛рдн рдорд╛рд░реНрдЬрд┐рди рд╕реНрд╡рд╕реНрде рд╣реИред"
            else:
                profit_text = f"""
                ЁЯТ░ Profit Analysis (Last 30 days):
                
                Total Revenue: тВ╣{total_revenue:.2f}
                Total Profit: тВ╣{total_profit:.2f}
                Average Profit Margin: {avg_profit_margin:.1f}%
                
                """
                
                if profit_by_item:
                    best_item = max(profit_by_item.items(), key=lambda x: x[1])
                    profit_text += f"Most Profitable: {best_item[0]} (тВ╣{best_item[1]:.2f})\n"
                
                # Add recommendations
                if avg_profit_margin < 20:
                    profit_text += "\nтЪая╕П Recommendation: Profit margin is low. Consider increasing prices or reducing costs."
                elif avg_profit_margin > 30:
                    profit_text += "\nтЬЕ Excellent! Profit margin is healthy."
            
            return {
                "text": profit_text,
                "agent": "finance",
                "success": True,
                "data": {
                    "total_revenue": total_revenue,
                    "total_profit": total_profit,
                    "avg_profit_margin": avg_profit_margin
                }
            }
            
        except Exception as e:
            logger.error(f"Profit analysis failed: {e}")
            return {
                "text": "рд▓рд╛рдн рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реЛ рд░рд╣реА рд╣реИ" if language == "hi" else "Having trouble with profit analysis",
                "agent": "finance",
                "success": False
            }
    
    async def _handle_expense_analysis(self, user_id: int, query: str, language: str) -> Dict[str, Any]:
        """Handle expense analysis"""
        try:
            db = next(get_db())
            
            # Get expenses for the last 30 days
            thirty_days_ago = datetime.now() - timedelta(days=30)
            
            expenses = db.query(Transaction).filter(
                Transaction.user_id == user_id,
                Transaction.transaction_type == "expense",
                Transaction.transaction_date >= thirty_days_ago
            ).all()
            
            if not expenses:
                return {
                    "text": "рдЕрднреА рддрдХ рдХреЛрдИ рдЦрд░реНрдЪ рджрд░реНрдЬ рдирд╣реАрдВ рд╣реИред" if language == "hi" else "No expenses recorded yet.",
                    "agent": "finance",
                    "success": True
                }
            
            total_expenses = sum(e.amount for e in expenses)
            
            # Categorize expenses
            expense_categories = {}
            for expense in expenses:
                category = self._categorize_expense(expense.description or "Other")
                expense_categories[category] = expense_categories.get(category, 0) + expense.amount
            
            if language == "hi":
                expense_text = f"""
                ЁЯТ╕ рдЦрд░реНрдЪ рд╡рд┐рд╢реНрд▓реЗрд╖рдг (рдкрд┐рдЫрд▓реЗ 30 рджрд┐рди):
                
                рдХреБрд▓ рдЦрд░реНрдЪ: тВ╣{total_expenses:.2f}
                рджреИрдирд┐рдХ рдФрд╕рдд рдЦрд░реНрдЪ: тВ╣{total_expenses/30:.2f}
                
                рдЦрд░реНрдЪ рдХреА рд╢реНрд░реЗрдгрд┐рдпрд╛рдВ:
                """
                
                for category, amount in sorted(expense_categories.items(), key=lambda x: x[1], reverse=True):
                    percentage = (amount / total_expenses) * 100
                    expense_text += f"тАв {category}: тВ╣{amount:.2f} ({percentage:.1f}%)\n"
                
                # Find highest expense category
                if expense_categories:
                    highest_category = max(expense_categories.items(), key=lambda x: x[1])
                    expense_text += f"\nрд╕рдмрд╕реЗ рдЬреНрдпрд╛рджрд╛ рдЦрд░реНрдЪ: {highest_category[0]}"
            else:
                expense_text = f"""
                ЁЯТ╕ Expense Analysis (Last 30 days):
                
                Total Expenses: тВ╣{total_expenses:.2f}
                Daily Average Expense: тВ╣{total_expenses/30:.2f}
                
                Expense Categories:
                """
                
                for category, amount in sorted(expense_categories.items(), key=lambda x: x[1], reverse=True):
                    percentage = (amount / total_expenses) * 100
                    expense_text += f"тАв {category}: тВ╣{amount:.2f} ({percentage:.1f}%)\n"
                
                # Find highest expense category
                if expense_categories:
                    highest_category = max(expense_categories.items(), key=lambda x: x[1])
                    expense_text += f"\nHighest Expense: {highest_category[0]}"
            
            return {
                "text": expense_text,
                "agent": "finance",
                "success": True,
                "data": {
                    "total_expenses": total_expenses,
                    "expense_categories": expense_categories
                }
            }
            
        except Exception as e:
            logger.error(f"Expense analysis failed: {e}")
            return {
                "text": "рдЦрд░реНрдЪ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реЛ рд░рд╣реА рд╣реИ" if language == "hi" else "Having trouble with expense analysis",
                "agent": "finance",
                "success": False
            }
    
    async def _handle_cashflow_inquiry(self, user_id: int, query: str, language: str) -> Dict[str, Any]:
        """Handle cash flow inquiries"""
        # Get cash in and cash out for the month
        insights = await self.get_insights(user_id)
        cash_flow = insights.get("cash_flow", {})
        
        cash_in = cash_flow.get("cash_in", 0)
        cash_out = cash_flow.get("cash_out", 0)
        net_flow = cash_flow.get("net_cash_flow", 0)
        
        if language == "hi":
            cashflow_text = f"""
            ЁЯТ░ рдирдХрджреА рдкреНрд░рд╡рд╛рд╣ рд░рд┐рдкреЛрд░реНрдЯ (30 рджрд┐рди):
            
            рдирдХрджреА рдЖрдирд╛: тВ╣{cash_in:.2f}
            рдирдХрджреА рдЬрд╛рдирд╛: тВ╣{cash_out:.2f}
            рд╢реБрджреНрдз рдирдХрджреА рдкреНрд░рд╡рд╛рд╣: тВ╣{net_flow:.2f}
            
            """
            
            if net_flow > 0:
                cashflow_text += "тЬЕ рдЕрдЪреНрдЫрд╛! рдЖрдкрдХрд╛ рдирдХрджреА рдкреНрд░рд╡рд╛рд╣ рд╕рдХрд╛рд░рд╛рддреНрдордХ рд╣реИред"
            elif net_flow < 0:
                cashflow_text += "тЪая╕П рдЪреЗрддрд╛рд╡рдиреА: рдирдХрджреА рдкреНрд░рд╡рд╛рд╣ рдирдХрд╛рд░рд╛рддреНрдордХ рд╣реИред рдЦрд░реНрдЪ рдХрдо рдХрд░реЗрдВ рдпрд╛ рдмрд┐рдХреНрд░реА рдмрдврд╝рд╛рдПрдВред"
            else:
                cashflow_text += "ЁЯУК рдирдХрджреА рдкреНрд░рд╡рд╛рд╣ рд╕рдВрддреБрд▓рд┐рдд рд╣реИред"
        else:
            cashflow_text = f"""
            ЁЯТ░ Cash Flow Report (30 days):
            
            Cash In: тВ╣{cash_in:.2f}
            Cash Out: тВ╣{cash_out:.2f}
            Net Cash Flow: тВ╣{net_flow:.2f}
            
            """
            
            if net_flow > 0:
                cashflow_text += "тЬЕ Good! Your cash flow is positive."
            elif net_flow < 0:
                cashflow_text += "тЪая╕П Warning: Cash flow is negative. Reduce expenses or increase sales."
            else:
                cashflow_text += "ЁЯУК Cash flow is balanced."
        
        return {
            "text": cashflow_text,
            "agent": "finance",
            "success": True,
            "data": cash_flow
        }
    
    async def _handle_tax_inquiry(self, user_id: int, query: str, language: str) -> Dict[str, Any]:
        """Handle tax-related inquiries"""
        try:
            insights = await self.get_insights(user_id)
            revenue = insights.get("revenue", {}).get("total_sales", 0)
            
            # Simplified GST calculation (assuming 18% GST for most items)
            gst_rate = 18
            gst_amount = (revenue * gst_rate) / (100 + gst_rate)
            
            if language == "hi":
                tax_text = f"""
                ЁЯУЛ рдХрд░ рдХреА рдЬрд╛рдирдХрд╛рд░реА (30 рджрд┐рди):
                
                рдХреБрд▓ рдмрд┐рдХреНрд░реА: тВ╣{revenue:.2f}
                рдЕрдиреБрдорд╛рдирд┐рдд GST (18%): тВ╣{gst_amount:.2f}
                
                ЁЯТб рдпрд╛рдж рд░рдЦреЗрдВ:
                тАв рдорд╣реАрдиреЗ рдХреА 20 рддрд╛рд░реАрдЦ рддрдХ GST рд░рд┐рдЯрд░реНрди рдЬрдорд╛ рдХрд░реЗрдВ
                тАв рд╕рднреА рдмрд┐рд▓ рд╕рдВрднрд╛рд▓ рдХрд░ рд░рдЦреЗрдВ  
                тАв рдЦрд░реАрджрд╛рд░реА рдкрд░ рдорд┐рд▓реЗ GST рдХрд╛ рдлрд╛рдпрджрд╛ рдЙрдард╛рдПрдВ
                
                рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП CA рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВред
                """
            else:
                tax_text = f"""
                ЁЯУЛ Tax Information (30 days):
                
                Total Sales: тВ╣{revenue:.2f}
                Estimated GST (18%): тВ╣{gst_amount:.2f}
                
                ЁЯТб Remember:
                тАв File GST returns by 20th of every month
                тАв Keep all bills safely
                тАв Claim input GST on purchases
                
                Consult a CA for detailed advice.
                """
            
            return {
                "text": tax_text,
                "agent": "finance",
                "success": True,
                "data": {
                    "revenue": revenue,
                    "estimated_gst": gst_amount
                }
            }
            
        except Exception as e:
            logger.error(f"Tax inquiry failed: {e}")
            return {
                "text": "рдХрд░ рдХреА рдЬрд╛рдирдХрд╛рд░реА рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реЛ рд░рд╣реА рд╣реИ" if language == "hi" else "Having trouble with tax information",
                "agent": "finance",
                "success": False
            }
    
    async def _handle_general_finance_query(self, user_id: int, query: str, language: str) -> Dict[str, Any]:
        """Handle general finance queries"""
        return {
            "text": "рдореИрдВ рдмрд┐рдХреНрд░реА, рд▓рд╛рдн, рдЦрд░реНрдЪ, рдирдХрджреА рдкреНрд░рд╡рд╛рд╣ рдФрд░ рдХрд░ рдХреА рдЬрд╛рдирдХрд╛рд░реА рджреЗ рд╕рдХрддрд╛ рд╣реВрдВред рдХреБрдЫ рдЦрд╛рд╕ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?" if language == "hi" 
                   else "I can provide information about sales, profit, expenses, cash flow, and taxes. What would you like to know?",
            "agent": "finance",
            "success": True
        }
    
    def _load_expense_categories(self) -> List[str]:
        """Load expense categories for Indian businesses"""
        return [
            "Rent", "Utilities", "Staff Salary", "Inventory Purchase", 
            "Transportation", "Marketing", "Maintenance", "License/Fees",
            "Insurance", "Loan EMI", "Other"
        ]
    
    def _load_tax_rates(self) -> Dict[str, float]:
        """Load Indian tax rates"""
        return {
            "GST_5": 5.0,
            "GST_12": 12.0,
            "GST_18": 18.0,
            "GST_28": 28.0,
            "Income_Tax": 30.0
        }
    
    def _load_financial_ratios(self) -> Dict[str, Dict[str, float]]:
        """Load healthy financial ratio benchmarks"""
        return {
            "profit_margin": {"good": 20, "average": 10, "poor": 5},
            "inventory_turnover": {"good": 12, "average": 6, "poor": 3},
            "cash_ratio": {"good": 0.3, "average": 0.1, "poor": 0.05}
        }
    
    def _categorize_expense(self, description: str) -> str:
        """Categorize expense based on description"""
        description_lower = description.lower()
        
        if any(word in description_lower for word in ["rent", "рдХрд┐рд░рд╛рдпрд╛"]):
            return "Rent"
        elif any(word in description_lower for word in ["electricity", "рдмрд┐рдЬрд▓реА", "water", "рдкрд╛рдиреА"]):
            return "Utilities"
        elif any(word in description_lower for word in ["salary", "рд╡реЗрддрди", "staff", "рдХрд░реНрдордЪрд╛рд░реА"]):
            return "Staff Salary"
        elif any(word in description_lower for word in ["inventory", "stock", "рд╕реНрдЯреЙрдХ", "рдорд╛рд▓"]):
            return "Inventory Purchase"
        elif any(word in description_lower for word in ["transport", "delivery", "рдбрд┐рд▓реАрд╡рд░реА"]):
            return "Transportation"
        elif any(word in description_lower for word in ["marketing", "advertisement", "рд╡рд┐рдЬреНрдЮрд╛рдкрди"]):
            return "Marketing"
        elif any(word in description_lower for word in ["repair", "maintenance", "рдорд░рдореНрдордд"]):
            return "Maintenance"
        elif any(word in description_lower for word in ["license", "fee", "рд▓рд╛рдЗрд╕реЗрдВрд╕", "рдлреАрд╕"]):
            return "License/Fees"
        elif any(word in description_lower for word in ["insurance", "рдмреАрдорд╛"]):
            return "Insurance"
        elif any(word in description_lower for word in ["loan", "emi", "рд▓реЛрди"]):
            return "Loan EMI"
        else:
            return "Other"
    
    async def _analyze_trends(self, user_id: int, db: Session) -> Dict[str, Any]:
        """Analyze financial trends over time"""
        try:
            # Simple trend analysis comparing last 15 days vs previous 15 days
            fifteen_days_ago = datetime.now() - timedelta(days=15)
            thirty_days_ago = datetime.now() - timedelta(days=30)
            
            # Recent period sales
            recent_sales = db.query(func.sum(Transaction.amount)).filter(
                Transaction.user_id == user_id,
                Transaction.transaction_type == "sale",
                Transaction.transaction_date >= fifteen_days_ago
            ).scalar() or 0
            
            # Previous period sales
            previous_sales = db.query(func.sum(Transaction.amount)).filter(
                Transaction.user_id == user_id,
                Transaction.transaction_type == "sale",
                Transaction.transaction_date >= thirty_days_ago,
                Transaction.transaction_date < fifteen_days_ago
            ).scalar() or 0
            
            # Calculate growth rate
            if previous_sales > 0:
                growth_rate = ((recent_sales - previous_sales) / previous_sales) * 100
            else:
                growth_rate = 0
            
            # Determine trend
            if growth_rate > 10:
                trend = "growing"
            elif growth_rate < -10:
                trend = "declining"
            else:
                trend = "stable"
            
            return {
                "revenue_trend": trend,
                "growth_rate": growth_rate,
                "recent_sales": recent_sales,
                "previous_sales": previous_sales
            }
            
        except Exception as e:
            logger.error(f"Trend analysis failed: {e}")
            return {
                "revenue_trend": "stable",
                "growth_rate": 0
            }
    
    async def _generate_financial_recommendations(self, insights: Dict[str, Any]) -> List[str]:
        """Generate actionable financial recommendations"""
        recommendations = []
        
        # Revenue recommendations
        revenue = insights.get("revenue", {})
        if revenue.get("total_sales", 0) == 0:
            recommendations.append("Start recording all sales transactions for better financial tracking")
        elif revenue.get("avg_transaction_value", 0) < 100:
            recommendations.append("Try to increase average transaction value through upselling")
        
        # Profitability recommendations
        profitability = insights.get("profitability", {})
        profit_margin = profitability.get("profit_margin", 0)
        if profit_margin < 15:
            recommendations.append("Consider increasing prices or reducing costs to improve profit margins")
        elif profit_margin > 35:
            recommendations.append("Excellent profit margins! Consider reinvesting in business growth")
        
        # Cash flow recommendations
        cash_flow = insights.get("cash_flow", {})
        net_flow = cash_flow.get("net_cash_flow", 0)
        if net_flow < 0:
            recommendations.append("Focus on reducing expenses and increasing sales to improve cash flow")
        
        # Expense recommendations
        expenses = insights.get("expenses", {})
        if expenses.get("total_expenses", 0) > revenue.get("total_sales", 0) * 0.8:
            recommendations.append("Expenses are high relative to revenue. Review and optimize costs")
        
        # Default recommendations
        if not recommendations:
            recommendations.extend([
                "Maintain detailed records of all transactions",
                "Review financial performance weekly",
                "Plan for seasonal variations in business"
            ])
        
        return recommendations[:5]  # Return top 5 recommendations